import telebot
from telebot import types
import sqlite3
import json
import database_f as dbf
from datetime import datetime, timedelta
import time
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton, InputMediaPhoto
# –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –∏ –∫–ª—é—á–∞–º–∏
config_file_path = 'config.json'

# –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å –∏—Å—Ç–æ—Ä–∏–µ–π –∏–∑–º–µ–Ω–µ–Ω–∏–π
history_file_path = 'history.json'

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
with open(config_file_path, 'r') as config_file:
    config = json.load(config_file)
bot = telebot.TeleBot(config["tg_token"])

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö SQLite
conn = sqlite3.connect('bot_database.db', check_same_thread=False)
cursor = conn.cursor()


# –û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é
main_menu = types.ReplyKeyboardMarkup(resize_keyboard=True)
main_menu.add(types.KeyboardButton("–ú–µ–Ω—é"))
main_menu.add(types.KeyboardButton("–ö–æ—Ä–∑–∏–Ω–∞"))
main_menu.add(types.KeyboardButton("–ò—Å—Ç–æ—Ä–∏—è –∑–∞–∫–∞–∑–æ–≤"))
main_menu.add(types.KeyboardButton("–û—Ü–µ–Ω–∏—Ç—å –±–ª—é–¥–æ"))

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@bot.message_handler(commands=['start'])
def handle_start(message):
    register_user(message)

def register_user(message):
    user_id = message.from_user.id
    username = message.from_user.username
    address = ''
    basket = ''

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    with conn:
        cursor.execute("SELECT * FROM users WHERE user_id=?", (user_id,))
        existing_user = cursor.fetchone()

        if not existing_user:
            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ
            cursor.execute("INSERT INTO users (user_id, username) VALUES (?, ?)",
                           (user_id, username))
            cursor.execute("INSERT INTO customers (telegram_id) VALUES (?)",
                           (user_id,))
            conn.commit()

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –º–µ–Ω—é
            bot.send_message(user_id, "–ü—Ä–∏–≤–µ—Ç! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!")
            bot.send_message(user_id, "–ö–∞–∫ —è –º–æ–≥—É –ø–æ–º–æ—á—å?", reply_markup=main_menu)
        else:
            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –º–µ–Ω—é
            bot.send_message(user_id, "–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ —è –º–æ–≥—É –ø–æ–º–æ—á—å?", reply_markup=main_menu)


def payment_method_keyboard():
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(types.KeyboardButton("–ö–∞—Ä—Ç–∞"))
    keyboard.add(types.KeyboardButton("–ù–∞–ª–∏—á–Ω—ã–µ"))
    return keyboard


# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π –±–ª—é–¥
categories = []
current_category = None
g_dishes = None

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã "–ú–µ–Ω—é"
@bot.message_handler(func=lambda message: message.text == "–ú–µ–Ω—é")
def handle_menu(message):
    global categories

    with conn:
        categories = dbf.s_categories()
        if categories:
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –º–µ–∂–¥—É –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
            category_buttons = InlineKeyboardMarkup(row_width=2)
            for category in categories:
                category_name = category[0]
                category_buttons.add(InlineKeyboardButton(category_name, callback_data=f"category:{category_name}"))

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
            bot.send_message(message.from_user.id, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=category_buttons)
        else:
            bot.send_message(message.from_user.id, "–ò–∑–≤–∏–Ω–∏—Ç–µ, –º–µ–Ω—é –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –º–µ–∂–¥—É –±–ª—é–¥–∞–º–∏
@bot.callback_query_handler(func=lambda call: call.data.startswith("next_dish:") or call.data.startswith("prev_dish:"))
def handle_dish_switch_callback(call):
    global current_category, g_dishes
    action, dish_index, total_dishes = call.data.split(":")

    dish_index = int(dish_index)
    total_dishes = int(total_dishes)

    with conn:
        dishes = dbf.s_products_from_category(current_category)
        g_dishes = dishes

        if total_dishes == 1:
            # –ï—Å–ª–∏ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤—Å–µ–≥–æ –æ–¥–Ω–æ –±–ª—é–¥–æ, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å
            bot.answer_callback_query(callback_query_id=call.id, text="–í –¥–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–æ–ª—å–∫–æ –æ–¥–Ω–æ –±–ª—é–¥–æ")
            return

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–∞—Ä—Ç–æ—á–∫–æ–π —Å–ª–µ–¥—É—é—â–µ–≥–æ –±–ª—é–¥–∞
        if action == "next_dish":
            next_dish_index = (dish_index + 1) % total_dishes
        else:
            next_dish_index = (dish_index - 1) % total_dishes

        send_dish_card(call.from_user.id, dishes[next_dish_index], next_dish_index, total_dishes, current_category, call.message.message_id)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (—Å–ª–µ–¥—É—é—â–∞—è –∏–ª–∏ –ø—Ä–µ–¥—ã–¥—É—â–∞—è)
@bot.callback_query_handler(func=lambda call: call.data.startswith("next_category:") or call.data.startswith("prev_category:"))
def handle_category_switch_callback(call):
    global current_category, g_dishes
    action, current_category_name = call.data.split(":")
    current_category_index = categories.index((current_category_name,))
    categories_count = len(categories)

    if action == "next_category":
        next_category_index = (current_category_index + 1) % categories_count
    else:
        next_category_index = (current_category_index - 1) % categories_count

    next_category_name = categories[next_category_index][0]  # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ª—å–∫–æ –∏–º—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    current_category = next_category_name  # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é

    with conn:
        dishes = dbf.s_products_from_category(next_category_name)
        g_dishes = dishes
        if dishes:
            send_dish_card(call.from_user.id, dishes[0], 0, len(dishes), next_category_name, call.message.message_id)
        else:
            bot.send_message(call.from_user.id, "–í –¥–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ—Ç –±–ª—é–¥.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
@bot.callback_query_handler(func=lambda call: call.data.startswith("category:"))
def handle_category_callback(call):
    global current_category, g_dishes
    category_name = call.data.split(":")[1]

    with conn:
        dishes = dbf.s_products_from_category(category_name)
        if dishes:
            send_dish_card(call.from_user.id, dishes[0], 0, len(dishes), category_name, call.message.message_id)
            current_category = category_name
            g_dishes= dishes
            print("current_category", current_category, "dishes[0]", dishes[0])
        else:
            bot.send_message(call.from_user.id, "–í –¥–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ—Ç –±–ª—é–¥.")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–∞—Ä—Ç–æ—á–∫–æ–π –±–ª—é–¥–∞ –∏ –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
def send_dish_card(user_id, dish, current_index, total_dishes, current_category, message_id=None, quantity=1):
    dish_id, dish_name, dish_description, dish_price, dish_rating, total_ratings, category = dish
    print("send dish card", current_category, category, "dish", dish)

    prev_category = (categories.index((current_category,)) - 1) % len(categories)
    next_category = (categories.index((current_category,)) + 1) % len(categories)
    print(prev_category)
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –±–ª—é–¥ –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    navigation_buttons = InlineKeyboardMarkup(row_width=3)
    prev_button = InlineKeyboardButton("‚óÄÔ∏è", callback_data=f"prev_dish:{current_index}:{total_dishes}")
    next_button = InlineKeyboardButton("‚ñ∂Ô∏è", callback_data=f"next_dish:{current_index}:{total_dishes}")
    prev_category_button = InlineKeyboardButton(f"‚¨ÖÔ∏è {categories[prev_category][0]}",
                                                callback_data=f"prev_category:{current_category}")
    next_category_button = InlineKeyboardButton(f"{categories[next_category][0]} ‚û°Ô∏è",
                                                callback_data=f"next_category:{current_category}")

    plus_button = InlineKeyboardButton("+", callback_data=f"increase_quantity:{quantity}:{current_index}")
    quantity_button = InlineKeyboardButton(str(quantity), callback_data="ignore")
    minus_button = InlineKeyboardButton("-", callback_data=f"decrease_quantity:{quantity}:{current_index}")

    add_to_basket_button = InlineKeyboardButton("üõí–î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É", callback_data=f"add_to_basket:{quantity}:{current_index}")

    navigation_buttons.row(prev_button, minus_button, quantity_button, plus_button, next_button)
    navigation_buttons.row(prev_category_button, next_category_button)
    navigation_buttons.row(add_to_basket_button)
    print(dish_name)
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–∞—Ä—Ç–æ—á–∫–æ–π –±–ª—é–¥–∞ –∏ –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    message_text = f"{dish_name}\n{dish_description}\n–¶–µ–Ω–∞: {dish_price} —Ä—É–±.\n\n"
    message_text += f"–ë–ª—é–¥–æ {current_index + 1} –∏–∑ {total_dishes}"
    image_path = f"images/{dish_id}.jpg"

    try:
        if message_id:
            bot.edit_message_media(chat_id=user_id, message_id=message_id,
                                   media=InputMediaPhoto(open(image_path, 'rb'), caption=message_text),
                                   reply_markup=navigation_buttons)
    except:
        bot.send_photo(user_id, open(image_path, 'rb'), caption=message_text, reply_markup=navigation_buttons)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "+"
@bot.callback_query_handler(func=lambda call: call.data.startswith("increase_quantity:"))
def handle_increase_quantity(call):
    quantity = int(call.data.split(":")[1]) + 1  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞ 1
    current_index = int(call.data.split(":")[2])
    send_dish_card(call.from_user.id, g_dishes[current_index], current_index, len(g_dishes), g_dishes[current_index][6], call.message.message_id, quantity=quantity)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "-"
@bot.callback_query_handler(func=lambda call: call.data.startswith("decrease_quantity:"))
def handle_decrease_quantity(call):
    quantity = int(call.data.split(":")[1]) - 1  # –£–º–µ–Ω—å—à–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞ 1
    current_index = int(call.data.split(":")[2])

    if quantity < 1:
        # –ï—Å–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç–∞–ª–æ –º–µ–Ω—å—à–µ 1, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å
        bot.answer_callback_query(callback_query_id=call.id, text="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –º–µ–Ω—å—à–µ 1")
        return
    # –ü–µ—Ä–µ–æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–∞—Ä—Ç–æ—á–∫–æ–π –±–ª—é–¥–∞ —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º
    send_dish_card(call.from_user.id, g_dishes[current_index], current_index, len(g_dishes), g_dishes[current_index][6], call.message.message_id, quantity=quantity)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É"
@bot.callback_query_handler(func=lambda call: call.data.startswith("add_to_basket:"))
def handle_add_to_cart(call):
    user_id = dbf.s_user_id(call.from_user.id)[0]
    quantity = int(call.data.split(":")[1])
    current_index = int(call.data.split(":")[2])
    product_id = g_dishes[current_index][0]  # –ü–æ–ª—É—á–∞–µ–º id –ø—Ä–æ–¥—É–∫—Ç–∞ –∏–∑ –¥–∞–Ω–Ω—ã—Ö –∫–Ω–æ–ø–∫–∏

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –±–ª—é–¥–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    with conn:
        product = dbf.s_product_info(product_id)
        if product:
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            basket_data = dbf.s_basket(user_id)

            if basket_data and basket_data != None:
                # –ï—Å–ª–∏ –∫–æ—Ä–∑–∏–Ω–∞ –Ω–µ –ø—É—Å—Ç–∞, –∑–∞–≥—Ä—É–∂–∞–µ–º –µ—ë –∏–∑ JSON
                basket = json.loads(basket_data[0])
            else:
                # –ï—Å–ª–∏ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é
                dbf.insert("basket", "user_id", (user_id,))
                basket = []

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π –ø—Ä–æ–¥—É–∫—Ç –≤ –∫–æ—Ä–∑–∏–Ω–µ
            product_found = False
            for item in basket:
                if item['product_id'] == product_id:
                    # –ï—Å–ª–∏ —Ç–æ–≤–∞—Ä –Ω–∞–π–¥–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω–µ, –æ–±–Ω–æ–≤–ª—è–µ–º –µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
                    item['quantity'] += quantity
                    product_found = True
                    break

            # –ï—Å–ª–∏ —Ç–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω–µ, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ
            if not product_found:
                basket.append({
                    "product_id": product_id,
                    "quantity": quantity
                })

            # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ—Ä–∑–∏–Ω—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            dbf.update("basket", ("basket_data", json.dumps(basket)), ("user_id", user_id))

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤ –∫–æ—Ä–∑–∏–Ω—É
            bot.answer_callback_query(callback_query_id=call.id, text=f"{product[1]} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É")

        else:
            bot.answer_callback_query(callback_query_id=call.id, text="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤ –∫–æ—Ä–∑–∏–Ω—É")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã "–ö–æ—Ä–∑–∏–Ω–∞"
@bot.message_handler(func=lambda message: message.text == "–ö–æ—Ä–∑–∏–Ω–∞")
def handle_cart_menu(message):
    send_basket_dish_card(message.from_user.id)

def send_basket_dish_card(chat_user_id, message_id=None, current_index=0):
    user_id = dbf.s_user_id(chat_user_id)[0]
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –∫–æ—Ä–∑–∏–Ω—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    with conn:
        cursor.execute("SELECT basket_data FROM basket WHERE user_id=?", (user_id,))
        user_data = cursor.fetchone()

        if user_data:
            basket = json.loads(user_data[0]) if user_data[0] else []  # –†–∞–∑–±–∏—Ä–∞–µ–º JSON, –µ—Å–ª–∏ –∫–æ—Ä–∑–∏–Ω–∞ –Ω–µ –ø—É—Å—Ç–∞
        else:
            basket = []

    if not basket:
        bot.send_message(chat_user_id, "–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.")
        return

    # –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    keyboard = InlineKeyboardMarkup(row_width=3)

    # –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –∫–æ—Ä–∑–∏–Ω–µ
    total_items = len(basket)

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º —Ç–æ–≤–∞—Ä–µ –≤ –∫–æ—Ä–∑–∏–Ω–µ
    current_item = basket[current_index]
    product_id = current_item['product_id']
    quantity = current_item['quantity']

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    product_info = dbf.s_product_info(product_id, "name, price")

    if product_info:
        dish_name = product_info[0]
        dish_price = product_info[1]
        image_path = f"images/{product_id}.jpg"
        cart_message = f"{dish_name} —Ü–µ–Ω–∞: {dish_price} —Ä—É–±."

        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —Ç–æ–≤–∞—Ä–∞ –∏ –∫–Ω–æ–ø–∫—É —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞
        increase_button = InlineKeyboardButton("+", callback_data=f"cart_item:increase:{current_index}:{quantity}")
        decrease_button = InlineKeyboardButton("-", callback_data=f"cart_item:decrease:{current_index}:{quantity}")
        quantity_button = InlineKeyboardButton(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {str(quantity)}", callback_data="ignore")
        index_button = InlineKeyboardButton(f"{current_index + 1}/{total_items}", callback_data="ignore")
        delete_button = InlineKeyboardButton(f"–£–¥–∞–ª–∏—Ç—å {dish_name}", callback_data=f"cart_item:delete:{product_id}")
        checkout_button = InlineKeyboardButton(f"–û—Ñ–æ—Ä–æ–º–∏—Ç—å –∑–∞–∫–∞–∑", callback_data=f"checkout")

        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –º–µ–∂–¥—É —Ç–æ–≤–∞—Ä–∞–º–∏ –≤ –∫–æ—Ä–∑–∏–Ω–µ
        prev_button = InlineKeyboardButton("‚óÄÔ∏è", callback_data=f"prev_cart_item:{current_index}:{total_items}")
        next_button = InlineKeyboardButton("‚ñ∂Ô∏è", callback_data=f"next_cart_item:{current_index}:{total_items}")
        keyboard.row( decrease_button, quantity_button, increase_button, )
        keyboard.add(prev_button, index_button, next_button)
        keyboard.add(delete_button)
        keyboard.add(checkout_button)

        if message_id:
            bot.edit_message_media(chat_id=chat_user_id, message_id=message_id,
                                   media=InputMediaPhoto(open(image_path, 'rb'), caption=cart_message),
                                   reply_markup=keyboard)
        else:
            bot.send_photo(chat_user_id, open(image_path, 'rb'), caption=cart_message, reply_markup=keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–æ–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è quantity(basket) –∏ —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã
@bot.callback_query_handler(func=lambda call: call.data.startswith("cart_item:"))
def handle_change_quantity(call):
    user_id = dbf.s_user_id(call.from_user.id)[0]
    current_index = int(call.data.split(":")[2])

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–ø–µ—Ä–∞—Ü–∏—é: —É–≤–µ–ª–∏—á–µ–Ω–∏–µ, —É–º–µ–Ω—å—à–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–∞ –∏–ª–∏ —É–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
    operation = call.data.split(":")[1]
    if operation == "increase":
        new_quantity = int(call.data.split(":")[3]) + 1  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞ 1
    elif operation == "decrease":
        if int(call.data.split(":")[3]) <= 1:
            # –ï—Å–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç–∞–ª–æ –º–µ–Ω—å—à–µ 1, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å
            bot.answer_callback_query(callback_query_id=call.id, text="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –º–µ–Ω—å—à–µ 1")
            return
        new_quantity = int(call.data.split(":")[3]) - 1  # –£–º–µ–Ω—å—à–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞ 1
    elif operation == "delete":
        # –ü–æ–ª—É—á–∞–µ–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —É–¥–∞–ª—è–µ–º–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
        product_id = int(call.data.split(":")[2])

        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –∫–æ—Ä–∑–∏–Ω—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        with conn:
            user_data = dbf.s_basket(user_id)
            if user_data:
                basket = json.loads(user_data[0]) if user_data[0] else []  # –†–∞–∑–±–∏—Ä–∞–µ–º JSON, –µ—Å–ª–∏ –∫–æ—Ä–∑–∏–Ω–∞ –Ω–µ –ø—É—Å—Ç–∞
            else:
                basket = []

            # –£–¥–∞–ª—è–µ–º —Ç–æ–≤–∞—Ä –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã –ø–æ –µ–≥–æ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—É
            new_basket = [item for item in basket if item['product_id'] != product_id]

            # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ—Ä–∑–∏–Ω—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            dbf.update("basket", ("basket_data", json.dumps(new_basket)), ("user_id", user_id))

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ—Ä–∑–∏–Ω–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        send_basket_dish_card(call.from_user.id, call.message.message_id)
        return

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –∫–æ—Ä–∑–∏–Ω—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    with conn:
        user_data = dbf.s_basket(user_id)

        if user_data:
            basket = json.loads(user_data[0]) if user_data[0] else []  # –†–∞–∑–±–∏—Ä–∞–µ–º JSON, –µ—Å–ª–∏ –∫–æ—Ä–∑–∏–Ω–∞ –Ω–µ –ø—É—Å—Ç–∞
        else:
            basket = []

        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω–µ
        basket[current_index]['quantity'] = new_quantity

        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ—Ä–∑–∏–Ω—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        dbf.update("basket", ("basket_data", json.dumps(basket)), ("user_id", user_id))

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ—Ä–∑–∏–Ω–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    send_basket_dish_card(call.from_user.id, call.message.message_id, current_index=current_index)



# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–æ–∫ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –º–µ–∂–¥—É —Ç–æ–≤–∞—Ä–∞–º–∏ –≤ –∫–æ—Ä–∑–∏–Ω–µ
@bot.callback_query_handler(func=lambda call: call.data.startswith("prev_cart_item") or call.data.startswith("next_cart_item"))
def handle_change_cart_item(call):

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â–∏–π –∏–Ω–¥–µ–∫—Å —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω–µ
    current_index = int(call.data.split(":")[1])
    total_items = int(call.data.split(":")[2])

    if total_items == 1:
        # –ï—Å–ª–∏ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤—Å–µ–≥–æ –æ–¥–Ω–æ –±–ª—é–¥–æ, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å
        bot.answer_callback_query(callback_query_id=call.id, text="–í –∫–æ—Ä–∑–∏–Ω–µ —Ç–æ–ª—å–∫–æ –æ–¥–Ω–æ –±–ª—é–¥–æ")
        return

    # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Ç–æ–≤–∞—Ä—É
    if call.data.startswith("next_cart_item"):
        next_index = (current_index + 1) % total_items
    # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É —Ç–æ–≤–∞—Ä—É
    else:
        next_index = (current_index - 1) % total_items

    send_basket_dish_card(call.from_user.id, call.message.message_id, next_index)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã "–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑"
@bot.callback_query_handler(func=lambda call: call.data == "checkout")
def handle_checkout(call):
    user_id = dbf.s_user_id(call.from_user.id)[0]
    with conn:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–∑–∏—Ü–∏–∏ –≤ –∫–æ—Ä–∑–∏–Ω–µ
        basket = dbf.s_basket(user_id)
        if basket and basket[0]:
            user_data = dbf.select("customers", "name, email, address", ("user_id", user_id))
            print(user_data)
            if user_data[2] != None:
                # –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–∂–µ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±–æ—Ä –∞–¥—Ä–µ—Å–∞
                address = user_data[2]
                keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
                keyboard.add(types.KeyboardButton(address))
                bot.send_message(call.from_user.id, "–í—ã–±–µ—Ä–∏—Ç–µ –∏–ª–∏ —É–∫–∞–∂–∏—Ç–µ –∞–¥—Ä–µ—Å:", reply_markup=keyboard)
                bot.register_next_step_handler(call.message, lambda msg: address_step(msg, 'address_choice'))
            else:
                if user_data[0] == None:
                    # –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–º—è –∏ email
                    bot.send_message(call.from_user.id, "–î–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è —É–∫–∞–∂–∏—Ç–µ –≤–∞—à–µ –∏–º—è.")
                    bot.register_next_step_handler(call.message, lambda msg: process_step(msg, 'name'))
        else:
            # –ï—Å–ª–∏ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞, —É–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            bot.send_message(call.from_user.id, "–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞")

def process_step(message, step):
    user_id = message.from_user.id

    if step == 'name':
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —à–∞–≥ —Å –∏–º–µ–Ω–µ–º
        name = message.text
        dbf.update("customers", ("name", name), ("user_id", user_id))

        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É
        bot.send_message(user_id, "–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ –≤–∞—à email:")
        bot.register_next_step_handler(message, lambda msg: process_step(msg, 'email'))

    elif step == 'email':
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —à–∞–≥ —Å email
        email = message.text
        dbf.update("customers", ("email", email), ("user_id", user_id))

        # –ü–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è email, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∞–¥—Ä–µ—Å
        bot.send_message(user_id, "–¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ –≤–∞—à –∞–¥—Ä–µ—Å:")
        bot.register_next_step_handler(message, lambda msg: address_step(msg, 'address_choice'))

def calculate_total_price(basket):
    total_price = 0

    with conn:
        for item in basket:
            product_id = item['product_id']

            # –ü–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã products
            cursor.execute("SELECT price FROM products WHERE product_id=?", (product_id,))
            product_info = cursor.fetchone()

            if product_info:
                price = product_info[0]
                quantity = item['quantity']

                # –°—É–º–º–∏—Ä—É–µ–º —Ü–µ–Ω—ã —Ç–æ–≤–∞—Ä–æ–≤
                total_price += price * quantity

    return total_price

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —à–∞–≥–∞ "address_choice"
def address_step(message, step):
    user_id = dbf.s_user_id(message.from_user.id)[0]
    basket = []

    if step == 'address_choice':
        address = message.text
        dbf.update("customers", ("address", address), ("user_id", user_id))

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –∫–æ—Ä–∑–∏–Ω–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        with conn:
            user_data = dbf.s_basket(user_id)

            if user_data:
                basket = json.loads(user_data[0]) if user_data[0] else []

        # –í—ã—á–∏—Å–ª—è–µ–º –æ–±—â—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞–∫–∞–∑–∞
        total_price = calculate_total_price(basket)

        # –í—Å—Ç–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ —Ç–∞–±–ª–∏—Ü—É orders
        with conn:
            cursor.execute("INSERT INTO orders (user_id, address, total_price, estimated_delivery_time, basket) "
                           "VALUES (?, ?, ?, ?, ?)",
                           (user_id, address, total_price, 30, json.dumps(basket)))
            conn.commit()

            # –û—á–∏—â–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            dbf.update("basket", ("basket_data", "[]"), ("user_id", user_id))
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø—Ä–∏–º–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è
        estimated_delivery_time = 30  # –≤ –º–∏–Ω—É—Ç–∞—Ö
        bot.send_message(message.from_user.id, f"–°–ø–∞—Å–∏–±–æ! –í–∞—à –∑–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç. –û–∂–∏–¥–∞–π—Ç–µ –¥–æ—Å—Ç–∞–≤–∫—É –ø–æ –∞–¥—Ä–µ—Å—É: {address}. "
                                   f"–ü—Ä–∏–º–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è: {estimated_delivery_time} –º–∏–Ω—É—Ç.", reply_markup=main_menu)


# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
print("Ready")
bot.infinity_polling()