import telebot
from telebot import types
import sqlite3
import json
import database_f as dbf
from datetime import datetime, timedelta
import time
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton, InputMediaPhoto
# –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –∏ –∫–ª—é—á–∞–º–∏
config_file_path = 'config.json'

# –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å –∏—Å—Ç–æ—Ä–∏–µ–π –∏–∑–º–µ–Ω–µ–Ω–∏–π
history_file_path = 'history.json'

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
with open(config_file_path, 'r') as config_file:
    config = json.load(config_file)
bot = telebot.TeleBot(config["tg_token"])
admin_group_chat_id = config["ADMIN_GROUP_CHAT_ID"]

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö SQLite
conn = sqlite3.connect('bot_database.db', check_same_thread=False)
cursor = conn.cursor()

total = 0

# –û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é
main_menu = types.ReplyKeyboardMarkup(resize_keyboard=True)
main_menu.add(types.KeyboardButton("–ú–µ–Ω—é"))
main_menu.add(types.KeyboardButton("–ö–æ—Ä–∑–∏–Ω–∞"))
main_menu.add(types.KeyboardButton("–ú–æ–∏ –∑–∞–∫–∞–∑—ã"))
main_menu.add(types.KeyboardButton("–û—Ü–µ–Ω–∏—Ç—å –±–ª—é–¥–æ"))

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@bot.message_handler(commands=['start'])
def handle_start(message):
    if message.chat.type == 'private':
        # –¢–æ–ª—å–∫–æ –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø—Ä–∏–≤–∞—Ç–Ω–æ
        register_user(message)
    else:
        # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –≥—Ä—É–ø–ø—É –∏–ª–∏ –∫–∞–Ω–∞–ª, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –µ–≥–æ
        pass

def register_user(message):
    user_id = message.from_user.id
    username = message.from_user.username
    address = ''
    basket = ''

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    with conn:
        cursor.execute("SELECT * FROM users WHERE user_id=?", (user_id,))
        existing_user = cursor.fetchone()

        if not existing_user:
            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ
            cursor.execute("INSERT INTO users (user_id, username) VALUES (?, ?)",
                           (user_id, username))
            cursor.execute("INSERT INTO customers (telegram_id) VALUES (?)",
                           (user_id,))
            conn.commit()

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –º–µ–Ω—é
            bot.send_message(user_id, "–ü—Ä–∏–≤–µ—Ç! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!")
            bot.send_message(user_id, "–ö–∞–∫ —è –º–æ–≥—É –ø–æ–º–æ—á—å?", reply_markup=main_menu)
        else:
            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –º–µ–Ω—é
            bot.send_message(user_id, "–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ —è –º–æ–≥—É –ø–æ–º–æ—á—å?", reply_markup=main_menu)


def payment_method_keyboard():
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(types.KeyboardButton("–ö–∞—Ä—Ç–∞"))
    keyboard.add(types.KeyboardButton("–ù–∞–ª–∏—á–Ω—ã–µ"))
    return keyboard


# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π –±–ª—é–¥
categories = []
current_category = None
g_dishes = ()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã "–ú–µ–Ω—é"
@bot.message_handler(func=lambda message: message.text == "–ú–µ–Ω—é")
def handle_menu(message):
    global categories

    with conn:
        categories = dbf.s_categories()
        if categories:
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –º–µ–∂–¥—É –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
            category_buttons = InlineKeyboardMarkup(row_width=2)
            for category in categories:
                category_name = category[0]
                category_buttons.add(InlineKeyboardButton(category_name, callback_data=f"category:{category_name}"))

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
            bot.send_message(message.from_user.id, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=category_buttons)
        else:
            bot.send_message(message.from_user.id, "–ò–∑–≤–∏–Ω–∏—Ç–µ, –º–µ–Ω—é –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –º–µ–∂–¥—É –±–ª—é–¥–∞–º–∏
@bot.callback_query_handler(func=lambda call: call.data.startswith("next_dish:") or call.data.startswith("prev_dish:"))
def handle_dish_switch_callback(call):
    global current_category, g_dishes
    action, dish_index, total_dishes = call.data.split(":")

    dish_index = int(dish_index)
    total_dishes = int(total_dishes)

    with conn:
        dishes = dbf.s_products_from_category(current_category)
        g_dishes = dishes

        if total_dishes == 1:
            # –ï—Å–ª–∏ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤—Å–µ–≥–æ –æ–¥–Ω–æ –±–ª—é–¥–æ, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å
            bot.answer_callback_query(callback_query_id=call.id, text="–í –¥–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–æ–ª—å–∫–æ –æ–¥–Ω–æ –±–ª—é–¥–æ")
            return

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–∞—Ä—Ç–æ—á–∫–æ–π —Å–ª–µ–¥—É—é—â–µ–≥–æ –±–ª—é–¥–∞
        if action == "next_dish":
            next_dish_index = (dish_index + 1) % total_dishes
        else:
            next_dish_index = (dish_index - 1) % total_dishes

        send_dish_card(call.from_user.id, dishes[next_dish_index], next_dish_index, total_dishes, current_category, call.message.message_id)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (—Å–ª–µ–¥—É—é—â–∞—è –∏–ª–∏ –ø—Ä–µ–¥—ã–¥—É—â–∞—è)
@bot.callback_query_handler(func=lambda call: call.data.startswith("next_category:") or call.data.startswith("prev_category:"))
def handle_category_switch_callback(call):
    global current_category, g_dishes
    action, current_category_name = call.data.split(":")
    current_category_index = categories.index((current_category_name,))
    categories_count = len(categories)

    if action == "next_category":
        next_category_index = (current_category_index + 1) % categories_count
    else:
        next_category_index = (current_category_index - 1) % categories_count

    next_category_name = categories[next_category_index][0]  # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ª—å–∫–æ –∏–º—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    current_category = next_category_name  # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é

    with conn:
        dishes = dbf.s_products_from_category(next_category_name)
        g_dishes = dishes
        if dishes:
            send_dish_card(call.from_user.id, dishes[0], 0, len(dishes), next_category_name, call.message.message_id)
        else:
            bot.send_message(call.from_user.id, "–í –¥–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ—Ç –±–ª—é–¥.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
@bot.callback_query_handler(func=lambda call: call.data.startswith("category:"))
def handle_category_callback(call):
    global current_category, g_dishes
    category_name = call.data.split(":")[1]

    with conn:
        dishes = dbf.s_products_from_category(category_name)
        if dishes:
            send_dish_card(call.from_user.id, dishes[0], 0, len(dishes), category_name, call.message.message_id)
            current_category = category_name
            g_dishes= dishes
            print("current_category", current_category, "dishes[0]", dishes[0])
        else:
            bot.send_message(call.from_user.id, "–í –¥–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ—Ç –±–ª—é–¥.")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–∞—Ä—Ç–æ—á–∫–æ–π –±–ª—é–¥–∞ –∏ –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
def send_dish_card(user_id, dish, current_index, total_dishes, current_category, message_id=None, quantity=1):
    dish_id, dish_name, dish_description, dish_price, dish_rating, total_ratings, category, _ = dish
    print("send dish card", current_category, category, "dish", dish)

    prev_category = (categories.index((current_category,)) - 1) % len(categories)
    next_category = (categories.index((current_category,)) + 1) % len(categories)
    print(prev_category)
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –±–ª—é–¥ –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    navigation_buttons = InlineKeyboardMarkup(row_width=3)
    prev_button = InlineKeyboardButton("‚óÄÔ∏è", callback_data=f"prev_dish:{current_index}:{total_dishes}")
    next_button = InlineKeyboardButton("‚ñ∂Ô∏è", callback_data=f"next_dish:{current_index}:{total_dishes}")
    prev_category_button = InlineKeyboardButton(f"‚¨ÖÔ∏è {categories[prev_category][0]}",
                                                callback_data=f"prev_category:{current_category}")
    next_category_button = InlineKeyboardButton(f"{categories[next_category][0]} ‚û°Ô∏è",
                                                callback_data=f"next_category:{current_category}")

    plus_button = InlineKeyboardButton("+", callback_data=f"increase_quantity:{quantity}:{current_index}")
    quantity_button = InlineKeyboardButton(str(quantity), callback_data="ignore")
    minus_button = InlineKeyboardButton("-", callback_data=f"decrease_quantity:{quantity}:{current_index}")

    add_to_basket_button = InlineKeyboardButton("üõí–î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É", callback_data=f"add_to_basket:{quantity}:{current_index}")

    navigation_buttons.row(prev_button, minus_button, quantity_button, plus_button, next_button)
    navigation_buttons.row(prev_category_button, next_category_button)
    navigation_buttons.row(add_to_basket_button)
    print(dish_name)
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–∞—Ä—Ç–æ—á–∫–æ–π –±–ª—é–¥–∞ –∏ –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    message_text = f"{dish_name}\n{dish_description}\n–¶–µ–Ω–∞: {dish_price} —Ä—É–±.\n\n"
    message_text += f"–ë–ª—é–¥–æ {current_index + 1} –∏–∑ {total_dishes}"
    image_path = f"images/{dish_id}.jpg"

    try:
        if message_id:
            bot.edit_message_media(chat_id=user_id, message_id=message_id,
                                   media=InputMediaPhoto(open(image_path, 'rb'), caption=message_text),
                                   reply_markup=navigation_buttons)
    except:
        bot.send_photo(user_id, open(image_path, 'rb'), caption=message_text, reply_markup=navigation_buttons)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "+"
@bot.callback_query_handler(func=lambda call: call.data.startswith("increase_quantity:"))
def handle_increase_quantity(call):
    quantity = int(call.data.split(":")[1]) + 1  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞ 1
    current_index = int(call.data.split(":")[2])
    send_dish_card(call.from_user.id, g_dishes[current_index], current_index, len(g_dishes), g_dishes[current_index][6], call.message.message_id, quantity=quantity)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "-"
@bot.callback_query_handler(func=lambda call: call.data.startswith("decrease_quantity:"))
def handle_decrease_quantity(call):
    quantity = int(call.data.split(":")[1]) - 1  # –£–º–µ–Ω—å—à–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞ 1
    current_index = int(call.data.split(":")[2])

    if quantity < 1:
        # –ï—Å–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç–∞–ª–æ –º–µ–Ω—å—à–µ 1, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å
        bot.answer_callback_query(callback_query_id=call.id, text="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –º–µ–Ω—å—à–µ 1")
        return
    # –ü–µ—Ä–µ–æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–∞—Ä—Ç–æ—á–∫–æ–π –±–ª—é–¥–∞ —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º
    send_dish_card(call.from_user.id, g_dishes[current_index], current_index, len(g_dishes), g_dishes[current_index][6], call.message.message_id, quantity=quantity)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É"
@bot.callback_query_handler(func=lambda call: call.data.startswith("add_to_basket:"))
def handle_add_to_cart(call):
    print(dbf.s_user_id(call.from_user.id)[0])
    user_id = dbf.s_user_id(call.from_user.id)[0]
    quantity = int(call.data.split(":")[1])
    current_index = int(call.data.split(":")[2])
    product_id = g_dishes[current_index][0]  # –ü–æ–ª—É—á–∞–µ–º id –ø—Ä–æ–¥—É–∫—Ç–∞ –∏–∑ –¥–∞–Ω–Ω—ã—Ö –∫–Ω–æ–ø–∫–∏

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –±–ª—é–¥–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    with conn:
        product = dbf.s_product_info(product_id)
        if product:
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            basket_data = dbf.s_basket(user_id)

            if basket_data and basket_data != None:
                # –ï—Å–ª–∏ –∫–æ—Ä–∑–∏–Ω–∞ –Ω–µ –ø—É—Å—Ç–∞, –∑–∞–≥—Ä—É–∂–∞–µ–º –µ—ë –∏–∑ JSON
                basket = json.loads(basket_data[0])
            else:
                # –ï—Å–ª–∏ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é
                dbf.insert("basket", "user_id", (user_id,))
                basket = []

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π –ø—Ä–æ–¥—É–∫—Ç –≤ –∫–æ—Ä–∑–∏–Ω–µ
            product_found = False
            for item in basket:
                if item['product_id'] == product_id:
                    # –ï—Å–ª–∏ —Ç–æ–≤–∞—Ä –Ω–∞–π–¥–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω–µ, –æ–±–Ω–æ–≤–ª—è–µ–º –µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
                    item['quantity'] += quantity
                    product_found = True
                    break

            # –ï—Å–ª–∏ —Ç–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω–µ, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ
            if not product_found:
                basket.append({
                    "product_id": product_id,
                    "quantity": quantity
                })

            # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ—Ä–∑–∏–Ω—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            dbf.update("basket", ("basket_data", json.dumps(basket)), ("user_id", user_id))

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤ –∫–æ—Ä–∑–∏–Ω—É
            bot.answer_callback_query(callback_query_id=call.id, text=f"{product[1]} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É")

        else:
            bot.answer_callback_query(callback_query_id=call.id, text="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤ –∫–æ—Ä–∑–∏–Ω—É")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã "–ö–æ—Ä–∑–∏–Ω–∞"
@bot.message_handler(func=lambda message: message.text == "–ö–æ—Ä–∑–∏–Ω–∞")
def handle_cart_menu(message):
    send_basket_dish_card(message.from_user.id)

def send_basket_dish_card(chat_user_id, message_id=None, current_index=0):
    user_id = dbf.s_user_id(chat_user_id)[0]
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –∫–æ—Ä–∑–∏–Ω—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    with conn:
        cursor.execute("SELECT basket_data FROM basket WHERE user_id=?", (user_id,))
        user_data = cursor.fetchone()

        if user_data:
            basket = json.loads(user_data[0]) if user_data[0] else []  # –†–∞–∑–±–∏—Ä–∞–µ–º JSON, –µ—Å–ª–∏ –∫–æ—Ä–∑–∏–Ω–∞ –Ω–µ –ø—É—Å—Ç–∞
        else:
            basket = []

    if not basket:
        bot.send_message(chat_user_id, "–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.")
        return

    # –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    keyboard = InlineKeyboardMarkup(row_width=3)

    # –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –∫–æ—Ä–∑–∏–Ω–µ
    total_items = len(basket)

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º —Ç–æ–≤–∞—Ä–µ –≤ –∫–æ—Ä–∑–∏–Ω–µ
    current_item = basket[current_index]
    product_id = current_item['product_id']
    quantity = current_item['quantity']

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    product_info = dbf.s_product_info(product_id, "name, price")

    if product_info:
        dish_name = product_info[0]
        dish_price = product_info[1]
        image_path = f"images/{product_id}.jpg"
        cart_message = f"{dish_name} —Ü–µ–Ω–∞: {dish_price} —Ä—É–±."

        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —Ç–æ–≤–∞—Ä–∞ –∏ –∫–Ω–æ–ø–∫—É —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞
        increase_button = InlineKeyboardButton("+", callback_data=f"cart_item:increase:{current_index}:{quantity}")
        decrease_button = InlineKeyboardButton("-", callback_data=f"cart_item:decrease:{current_index}:{quantity}")
        quantity_button = InlineKeyboardButton(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {str(quantity)}", callback_data="ignore")
        index_button = InlineKeyboardButton(f"{current_index + 1}/{total_items}", callback_data="ignore")
        delete_button = InlineKeyboardButton(f"–£–¥–∞–ª–∏—Ç—å {dish_name}", callback_data=f"cart_item:delete:{product_id}")
        checkout_button = InlineKeyboardButton(f"–û—Ñ–æ—Ä–æ–º–∏—Ç—å –∑–∞–∫–∞–∑", callback_data=f"checkout")

        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –º–µ–∂–¥—É —Ç–æ–≤–∞—Ä–∞–º–∏ –≤ –∫–æ—Ä–∑–∏–Ω–µ
        prev_button = InlineKeyboardButton("‚óÄÔ∏è", callback_data=f"prev_cart_item:{current_index}:{total_items}")
        next_button = InlineKeyboardButton("‚ñ∂Ô∏è", callback_data=f"next_cart_item:{current_index}:{total_items}")
        keyboard.row( decrease_button, quantity_button, increase_button, )
        keyboard.add(prev_button, index_button, next_button)
        keyboard.add(delete_button)
        keyboard.add(checkout_button)

        if message_id:
            bot.edit_message_media(chat_id=chat_user_id, message_id=message_id,
                                   media=InputMediaPhoto(open(image_path, 'rb'), caption=cart_message),
                                   reply_markup=keyboard)
        else:
            bot.send_photo(chat_user_id, open(image_path, 'rb'), caption=cart_message, reply_markup=keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–æ–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è quantity(basket) –∏ —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã
@bot.callback_query_handler(func=lambda call: call.data.startswith("cart_item:"))
def handle_change_quantity(call):
    user_id = dbf.s_user_id(call.from_user.id)[0]
    current_index = int(call.data.split(":")[2])

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–ø–µ—Ä–∞—Ü–∏—é: —É–≤–µ–ª–∏—á–µ–Ω–∏–µ, —É–º–µ–Ω—å—à–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–∞ –∏–ª–∏ —É–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
    operation = call.data.split(":")[1]
    if operation == "increase":
        new_quantity = int(call.data.split(":")[3]) + 1  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞ 1
    elif operation == "decrease":
        if int(call.data.split(":")[3]) <= 1:
            # –ï—Å–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç–∞–ª–æ –º–µ–Ω—å—à–µ 1, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å
            bot.answer_callback_query(callback_query_id=call.id, text="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –º–µ–Ω—å—à–µ 1")
            return
        new_quantity = int(call.data.split(":")[3]) - 1  # –£–º–µ–Ω—å—à–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞ 1
    elif operation == "delete":
        # –ü–æ–ª—É—á–∞–µ–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —É–¥–∞–ª—è–µ–º–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
        product_id = int(call.data.split(":")[2])

        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –∫–æ—Ä–∑–∏–Ω—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        with conn:
            user_data = dbf.s_basket(user_id)
            if user_data:
                basket = json.loads(user_data[0]) if user_data[0] else []  # –†–∞–∑–±–∏—Ä–∞–µ–º JSON, –µ—Å–ª–∏ –∫–æ—Ä–∑–∏–Ω–∞ –Ω–µ –ø—É—Å—Ç–∞
            else:
                basket = []

            # –£–¥–∞–ª—è–µ–º —Ç–æ–≤–∞—Ä –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã –ø–æ –µ–≥–æ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—É
            new_basket = [item for item in basket if item['product_id'] != product_id]

            # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ—Ä–∑–∏–Ω—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            dbf.update("basket", ("basket_data", json.dumps(new_basket)), ("user_id", user_id))

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ—Ä–∑–∏–Ω–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        send_basket_dish_card(call.from_user.id, call.message.message_id)
        return

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –∫–æ—Ä–∑–∏–Ω—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    with conn:
        user_data = dbf.s_basket(user_id)

        if user_data:
            basket = json.loads(user_data[0]) if user_data[0] else []  # –†–∞–∑–±–∏—Ä–∞–µ–º JSON, –µ—Å–ª–∏ –∫–æ—Ä–∑–∏–Ω–∞ –Ω–µ –ø—É—Å—Ç–∞
        else:
            basket = []

        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω–µ
        basket[current_index]['quantity'] = new_quantity

        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ—Ä–∑–∏–Ω—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        dbf.update("basket", ("basket_data", json.dumps(basket)), ("user_id", user_id))

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ—Ä–∑–∏–Ω–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    send_basket_dish_card(call.from_user.id, call.message.message_id, current_index=current_index)



# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–æ–∫ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –º–µ–∂–¥—É —Ç–æ–≤–∞—Ä–∞–º–∏ –≤ –∫–æ—Ä–∑–∏–Ω–µ
@bot.callback_query_handler(func=lambda call: call.data.startswith("prev_cart_item") or call.data.startswith("next_cart_item"))
def handle_change_cart_item(call):

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â–∏–π –∏–Ω–¥–µ–∫—Å —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω–µ
    current_index = int(call.data.split(":")[1])
    total_items = int(call.data.split(":")[2])

    if total_items == 1:
        # –ï—Å–ª–∏ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤—Å–µ–≥–æ –æ–¥–Ω–æ –±–ª—é–¥–æ, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å
        bot.answer_callback_query(callback_query_id=call.id, text="–í –∫–æ—Ä–∑–∏–Ω–µ —Ç–æ–ª—å–∫–æ –æ–¥–Ω–æ –±–ª—é–¥–æ")
        return

    # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Ç–æ–≤–∞—Ä—É
    if call.data.startswith("next_cart_item"):
        next_index = (current_index + 1) % total_items
    # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É —Ç–æ–≤–∞—Ä—É
    else:
        next_index = (current_index - 1) % total_items

    send_basket_dish_card(call.from_user.id, call.message.message_id, next_index)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã "–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑"
@bot.callback_query_handler(func=lambda call: call.data == "checkout")
def handle_checkout(call):
    user_id = dbf.s_user_id(call.from_user.id)[0]
    with conn:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–∑–∏—Ü–∏–∏ –≤ –∫–æ—Ä–∑–∏–Ω–µ
        basket = dbf.s_basket(user_id)
        if basket and basket[0]:
            user_data = dbf.select("customers", "name, email, address", "WHERE user_id = ?", (user_id,))[0]
            print(user_data)
            if user_data[2] != None:
                # –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–∂–µ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±–æ—Ä –∞–¥—Ä–µ—Å–∞
                address = user_data[2]
                keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
                keyboard.add(types.KeyboardButton(address))
                bot.send_message(call.from_user.id, "–í—ã–±–µ—Ä–∏—Ç–µ –∏–ª–∏ —É–∫–∞–∂–∏—Ç–µ –∞–¥—Ä–µ—Å:", reply_markup=keyboard)
                bot.register_next_step_handler(call.message, lambda msg: address_step(msg, 'address_choice'))
            else:
                if user_data[0] == None:
                    # –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–º—è –∏ email
                    bot.send_message(call.from_user.id, "–î–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è —É–∫–∞–∂–∏—Ç–µ –≤–∞—à–µ –∏–º—è.")
                    bot.register_next_step_handler(call.message, lambda msg: process_step(msg, 'name'))
        else:
            # –ï—Å–ª–∏ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞, —É–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            bot.send_message(call.from_user.id, "–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞")

def process_step(message, step):
    user_id = dbf.s_user_id(message.from_user.id)[0]

    if step == 'name':
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —à–∞–≥ —Å –∏–º–µ–Ω–µ–º
        name = message.text
        dbf.update("customers", ("name", name), ("user_id", user_id))

        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É
        bot.send_message(message.from_user.id, "–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ –≤–∞—à email:")
        bot.register_next_step_handler(message, lambda msg: process_step(msg, 'email'))

    elif step == 'email':
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —à–∞–≥ —Å email
        email = message.text
        dbf.update("customers", ("email", email), ("user_id", user_id))

        # –ü–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è email, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∞–¥—Ä–µ—Å
        bot.send_message(message.from_user.id, "–¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ –≤–∞—à –∞–¥—Ä–µ—Å:")
        bot.register_next_step_handler(message, lambda msg: address_step(msg, 'address_choice'))

def calculate_total_price(basket):
    total_price = 0

    with conn:
        for item in basket:
            product_id = item['product_id']

            # –ü–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã products
            cursor.execute("SELECT price FROM products WHERE product_id=?", (product_id,))
            product_info = cursor.fetchone()

            if product_info:
                price = product_info[0]
                quantity = item['quantity']

                # –°—É–º–º–∏—Ä—É–µ–º —Ü–µ–Ω—ã —Ç–æ–≤–∞—Ä–æ–≤
                total_price += price * quantity

    return total_price

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –æ–∂–∏–¥–∞–Ω–∏—è
def calculate_estimated_delivery_time(basket):
    max_cooking_time = 0

    # –ù–∞—Ö–æ–¥–∏–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è –±–ª—é–¥–∞ –≤ –∫–æ—Ä–∑–∏–Ω–µ
    for item in basket:
        product_id = item['product_id']

        cursor.execute("SELECT cooking_time FROM products WHERE product_id=?", (product_id,))
        product_info = cursor.fetchone()

        if product_info:
            cooking_time = product_info[0]
            max_cooking_time = max(max_cooking_time, cooking_time)

    # –í—ã—á–∏—Å–ª—è–µ–º –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∫–∞–∫ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è + 30 –º–∏–Ω—É—Ç
    delivery_time = max_cooking_time + 30
    return delivery_time

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —à–∞–≥–∞ "address_choice"
def address_step(message, step):
    from_user_id = message.from_user.id
    user_id = dbf.s_user_id(from_user_id)[0]
    basket = []

    if step == 'address_choice':
        address = message.text

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –∫–æ—Ä–∑–∏–Ω–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        with conn:
            user_data = dbf.s_basket(user_id)

            if user_data:
                basket = json.loads(user_data[0]) if user_data[0] else []

        # –í—ã—á–∏—Å–ª—è–µ–º –æ–±—â—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞–∫–∞–∑–∞
        total_price = calculate_total_price(basket)

        # –í—ã—á–∏—Å–ª—è–µ–º –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è
        estimated_delivery_time = calculate_estimated_delivery_time(basket)

        # –í—Å—Ç–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ —Ç–∞–±–ª–∏—Ü—É orders
        with conn:
            cursor.execute("INSERT INTO orders (user_id, address, total_price, estimated_delivery_time, basket) "
                           "VALUES (?, ?, ?, ?, ?)",
                           (user_id, address, total_price, estimated_delivery_time, json.dumps(basket)))
            conn.commit()

            # –û—á–∏—â–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            dbf.update("basket", ("basket_data", "[]"), ("user_id", user_id))

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø—Ä–∏–º–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è
        bot.send_message(message.from_user.id, f"–°–ø–∞—Å–∏–±–æ! –í–∞—à –∑–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç. –û–∂–∏–¥–∞–π—Ç–µ –¥–æ—Å—Ç–∞–≤–∫—É –ø–æ –∞–¥—Ä–µ—Å—É: {address}. "
                                                f"–ü—Ä–∏–º–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è: {estimated_delivery_time} –º–∏–Ω—É—Ç.", reply_markup=main_menu)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–∫–∞–∑–µ –≤ –≥—Ä—É–ø–ø—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
        notify_admins_about_order(cursor.lastrowid, address, status=0, chat_id=admin_group_chat_id)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞–∫–∞–∑–æ–≤
def show_order_history(from_user_id, message_id=None):
    with conn:
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Ç–∞–±–ª–∏—Ü—ã orders
        my_orders =dbf.select("orders", "*", "WHERE status = ? OR status = ? OR status = ?", ("–û–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è", "–≥–æ—Ç–æ–≤–∏—Ç—Å—è", "–≥–æ—Ç–æ–≤"))
        print(my_orders)

    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(types.InlineKeyboardButton("üì¶–ò–°–¢–û–†–ò–Ø –ó–ê–ö–ê–ó–û–íüì¶", callback_data="orders_history:"))
    if my_orders:
        # –ï—Å–ª–∏ –µ—Å—Ç—å –∑–∞–∫–∞–∑—ã, —Ñ–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∏—Ö —Å–ø–∏—Å–∫–æ–º

        for order in my_orders:
            order_id, user_id, address, total_price, order_date, estimated_delivery_time, status, basket, rated = order
            callback_data = f"order_info:{order_id}"
            button_text = f"–ó–∞–∫–∞–∑ {order_date}, –°—É–º–º–∞: {total_price} —Ä—É–±., –í—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏: {estimated_delivery_time} –º–∏–Ω."
            keyboard.add(types.InlineKeyboardButton(button_text, callback_data=callback_data))
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
        if message_id:
            bot.edit_message_text(chat_id=from_user_id, message_id=message_id, text="–ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–∫–∞–∑—ã:", reply_markup=keyboard)
        else:
            bot.send_message(from_user_id, "–ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–∫–∞–∑—ã:", reply_markup=keyboard)
    else:
        if message_id:
            bot.edit_message_text(chat_id=from_user_id, message_id=message_id, text="–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤.", reply_markup=keyboard)
        else:
            bot.send_message(from_user_id, "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤.", reply_markup=keyboard)

    orders_history = types.ReplyKeyboardMarkup(resize_keyboard=True)
    orders_history.add(types.KeyboardButton("–ò—Å—Ç–æ—Ä–∏—è –∑–∞–∫–∞–∑–æ–≤"))


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∑–∞–∫–∞–∑–µ
@bot.callback_query_handler(func=lambda call: call.data.startswith("order_info:") or call.data == "back_to_orders")
def handle_order_info_callback(call):
    from_user_id = call.from_user.id
    if call.data == "back_to_orders":
        show_order_history(from_user_id, call.message.message_id)
        return
    user_id = dbf.s_user_id(call.from_user.id)[0]
    order_id = int(call.data.split(":")[1])
    back_button_text = "–ú–æ–∏ –∑–∞–∫–∞–∑—ã"
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton(f"–ù–∞–∑–∞–¥ –∫ {back_button_text}", callback_data="back_to_orders"))

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    with conn:
        order_info = dbf.select("orders", "total_price, estimated_delivery_time, order_date, basket, status, rated", "WHERE order_id = ? AND user_id = ?", (order_id, user_id))

    if order_info:
        total_price, estimated_delivery_time, order_date, basket_json, status, rated = order_info[0]
        basket = json.loads(basket_json) if basket_json else []
        if status == "–¥–æ—Å—Ç–∞–≤–ª–µ–Ω" and int(rated) == 0:
            keyboard.add(InlineKeyboardButton(f"–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤", callback_data=f"order_comment:{order_id}"))
        elif status == "–¥–æ—Å—Ç–∞–≤–ª–µ–Ω" and int(rated) == 1:
            keyboard.add(InlineKeyboardButton(f"–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ—Ç–∑—ã–≤", callback_data=f"show_comment:{order_id}"))
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∑–∞–∫–∞–∑–µ
        order_message = f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–∫–∞–∑–µ –æ—Ç {order_date}:\n\n"
        for item in basket:
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–ª—é–¥–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø–æ –µ–≥–æ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—É
            product_info = dbf.s_product_info(item['product_id'], "name")

            if product_info:
                dish_name = product_info[0]
                order_message += f"{dish_name} (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: {item['quantity']})\n"

        order_message += f"\n–ò—Ç–æ–≥–æ: {total_price} —Ä—É–±.\n–°—Ç–∞—Ç—É—Å: {status}\n"
        order_message += f"–ü—Ä–∏–º–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è: {estimated_delivery_time} –º–∏–Ω—É—Ç."

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∑–∞–∫–∞–∑–µ
        bot.edit_message_text(chat_id=from_user_id, message_id=call.message.message_id, text=order_message, reply_markup=keyboard)
    else:
        # –ï—Å–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–∫–∞–∑–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        bot.answer_callback_query(callback_query_id=call.id, show_alert=True, text="–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–∫–∞–∑–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")

@bot.callback_query_handler(func=lambda call: call.data.startswith("show_comment:"))
def handle_show_comment(call):
    from_user_id = call.from_user.id
    order_id = call.data.split(":")[1]
    message_id = call.message.message_id
    comment_text = dbf.select("order_comments","comment_text", "WHERE order_id = ?", (order_id,))[0][0]
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton(f"–ù–∞–∑–∞–¥ –∫ –∑–∞–∫–∞–∑–∞–º", callback_data="back_to_orders"))
    bot.edit_message_text(chat_id=from_user_id, message_id=message_id, text=f"–í–∞—à –æ—Ç–∑—ã–≤:\n{comment_text}", reply_markup=keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤
@bot.callback_query_handler(func=lambda call: call.data.startswith("order_comment:") or call.data.startswith("edit_comment:"))
def handle_order_comment(call):
    from_user_id = call.from_user.id
    message_id = call.message.message_id
    user_id = dbf.s_user_id(from_user_id)
    order_id = int(call.data.split(":")[1])
    if call.data.startswith("order_comment:"):
        order_ids = []
        orders = dbf.select("order_comments", "DISTINCT order_id", "", ())
        for order in orders:
            order_ids.append(order[0])
        if order_id in order_ids:
            bot.answer_callback_query(callback_query_id=call.id, text="–í—ã —É–∂–µ –æ—Å—Ç–∞–≤–ª—è–ª–∏ –æ—Ç–∑—ã–≤ –∫ —ç—Ç–æ–º—É –∑–∞–∫–∞–∑—É")
            return
    if user_id:
        # –ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤–≤–µ—Å—Ç–∏ –æ—Ç–∑—ã–≤
        if message_id:
            bot.edit_message_text(chat_id=from_user_id, message_id=message_id, text="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –æ—Ç–∑—ã–≤:")
        else:
            bot.send_message(from_user_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –æ—Ç–∑—ã–≤:")
        # –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–≤–æ–¥–∞ –æ—Ç–∑—ã–≤–∞
        bot.register_next_step_handler(call.message, process_order_comment, order_id)
        dbf.insert("order_comments", "order_id", (order_id,))
    else:
        bot.send_message(from_user_id, "–í–∞—à –∞–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


def process_order_comment(message, order_id):
    # –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—Å—Ç –æ—Ç–∑—ã–≤–∞
    comment_text = message.text
    from_user_id = message.from_user.id
    message_id = int(message.message_id)+1
    print(message_id)

    if from_user_id:
        # –û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –µ–≥–æ –æ—Ç–∑—ã–≤ —Å –∫–Ω–æ–ø–∫–∞–º–∏ "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ç–∑—ã–≤" –∏ "–ò–∑–º–µ–Ω–∏—Ç—å –æ—Ç–∑—ã–≤"
        keyboard = types.InlineKeyboardMarkup()
        save_button = types.InlineKeyboardButton("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ç–∑—ã–≤",
                                                 callback_data=f"save_comment:{order_id}:{message_id}:order")
        edit_button = types.InlineKeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å –æ—Ç–∑—ã–≤", callback_data=f"edit_comment:{order_id}:{message_id}:order")
        keyboard.add(save_button, edit_button)
        dbf.update("order_comments", ("comment_text", comment_text), ("order_id", order_id))
        bot.send_message(from_user_id, f"–í–∞—à –æ—Ç–∑—ã–≤:\n{comment_text}", reply_markup=keyboard)
    else:
        bot.send_message(from_user_id, "–í–∞—à –∞–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ç–∑—ã–≤"
@bot.callback_query_handler(func=lambda call: call.data.startswith("save_comment:"))
def handle_save_comment(call):
    message_id = call.data.split(":")[2]
    user_id = dbf.s_user_id(call.from_user.id)[0]
    order_id = call.data.split(":")[1]
    where_from = call.data.split(":")[3]
    if where_from == "order":
        comment_text = dbf.select("order_comments", "comment_text", "WHERE order_id = ?", (order_id,))
    else:
        comment_text = dbf.select("dish_comments", "comment_text", "WHERE product_id = ?", (order_id,))
    print(comment_text)
    # –û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –æ –Ω–æ–≤–æ–º –æ—Ç–∑—ã–≤–µ
    keyboard_admin = types.InlineKeyboardMarkup()
    access_comment_button = types.InlineKeyboardButton("–û–¥–æ–±—Ä–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π",
                                                       callback_data=f"access_comment:{user_id}:{order_id}:{message_id}:{where_from}")
    delete_comment_button = types.InlineKeyboardButton("–£–¥–∞–ª–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π",
                                                       callback_data=f"delete_comment:{user_id}:{order_id}:{message_id}:{where_from}")
    keyboard_admin.add(access_comment_button, delete_comment_button)
    back_to_dishes_keyboard = types.InlineKeyboardMarkup().add(types.InlineKeyboardButton("–ö —Å–ø–∏—Å–∫—É –±–ª—é–¥", callback_data=f"back_to_dishes:"))
    bot.edit_message_text(chat_id=call.from_user.id, text="–í–∞—à –æ—Ç–∑—ã–≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!", message_id=call.message.message_id, reply_markup=back_to_dishes_keyboard)
    print(comment_text)
    if call.data.split(":")[3] == "order":
        text = f"–ù–æ–≤—ã–π –æ—Ç–∑—ã–≤ –∫ –∑–∞–∫–∞–∑—É ‚Ññ{order_id}:\n{comment_text[0][0]}"
    else:
        dish_name = dbf.select("products", "name", "WHERE product_id=?", (order_id,))
        text = f"–ù–æ–≤—ã–π –æ—Ç–∑—ã–≤ –∫ –±–ª—é–¥—É {dish_name}:\n{comment_text[0][0]}"
    bot.send_message(admin_group_chat_id, text, reply_markup=keyboard_admin)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∏—Å—Ç–æ—Ä–∏—é –∑–∞–∫–∞–∑–æ–≤
@bot.callback_query_handler(func=lambda call: call.data.startswith("orders_history:"))
def handle_orders_history_callback(call):
    from_user_id = call.from_user.id
    user_id = dbf.s_user_id(from_user_id)
    if user_id:
        user_id = user_id[0]
        # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –∑–∞–∫–∞–∑–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        with conn:
            orders =dbf.select("orders", "*", "WHERE status = ? OR status = ?", ("–¥–æ—Å—Ç–∞–≤–ª–µ–Ω", "–æ—Ç–º–µ–Ω–µ–Ω"))

        if orders:
            order_buttons = []
            for order in orders:
                order_id, user_id, address, total_price, order_date, estimated_delivery_time, status, basket, rated = order
                order_button_text = f"–ó–∞–∫–∞–∑ –Ω–∞ {total_price} —Ä—É–±–ª–µ–π ({order_date}) - {status}"
                order_buttons.append(InlineKeyboardButton(order_button_text, callback_data=f"order_info:{order_id}"))

            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
            keyboard = types.InlineKeyboardMarkup()
            for button in order_buttons:
                keyboard.add(button)
            keyboard.add(InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back_to_orders"))

            bot.edit_message_text(chat_id=from_user_id, message_id=call.message.message_id,
                                  text="–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–∫–∞–∑ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:", reply_markup=keyboard)
        else:
            bot.answer_callback_query(callback_query_id=call.id, show_alert=True, text="–£ –≤–∞—Å –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤ –≤ –∏—Å—Ç–æ—Ä–∏–∏.")
    else:
        bot.answer_callback_query(callback_query_id=call.id, show_alert=True,
                                  text="–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /admin
@bot.message_handler(commands=['admin'])
def handle_admin(message, message_id=None):
    from_user_id = message.from_user.id
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    if is_admin(from_user_id):
        admin_markup = types.InlineKeyboardMarkup()

        # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –¥–µ–π—Å—Ç–≤–∏–π —Å –ø—Ä–æ–¥—É–∫—Ç–∞–º–∏
        product_actions = types.InlineKeyboardButton(text="–î–µ–π—Å—Ç–≤–∏—è —Å –ø—Ä–æ–¥—É–∫—Ç–∞–º–∏", callback_data="product_actions")
        admin_markup.add(product_actions)

        # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞–∫–∞–∑–æ–≤
        orders_group = types.InlineKeyboardButton(text="–ó–∞–∫–∞–∑—ã", callback_data="orders_group")
        admin_markup.add(orders_group)

        if message_id:
            bot.edit_message_text(chat_id=from_user_id, message_id=message_id,
                                  text="–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–µ–π—Å—Ç–≤–∏–π:", reply_markup=admin_markup)
        else:
            bot.send_message(from_user_id, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–µ–π—Å—Ç–≤–∏–π:", reply_markup=admin_markup)
    else:
        bot.send_message(from_user_id, "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è inline-–∫–Ω–æ–ø–∫–∏ "–ó–∞–∫–∞–∑—ã"
@bot.callback_query_handler(func=lambda call: call.data == 'orders_group')
def handle_orders_group(call):
    from_user_id = call.from_user.id
    if is_admin(from_user_id):
        orders_markup = types.InlineKeyboardMarkup()

        # –ö–Ω–æ–ø–∫–∞ "–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–∫–∞–∑—ã"
        view_orders = types.InlineKeyboardButton(text="–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–∫–∞–∑—ã", callback_data="view_orders")

        # –ö–Ω–æ–ø–∫–∞ "–î–µ–π—Å—Ç–≤–∏—è —Å –∑–∞–∫–∞–∑–∞–º–∏"
        order_actions = types.InlineKeyboardButton(text="–î–µ–π—Å—Ç–≤–∏—è —Å –∑–∞–∫–∞–∑–∞–º–∏", callback_data="orders_actions")
        orders_markup.add(view_orders, order_actions)
        orders_markup.add(InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data=f"back_to_admin_panel:{call.message.message_id}"))

        bot.edit_message_text(chat_id=from_user_id, message_id=call.message.message_id, text="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ —Å –∑–∞–∫–∞–∑–∞–º–∏:",
                              reply_markup=orders_markup)
    else:
        bot.edit_message_text(chat_id=from_user_id, message_id=call.message.message_id,
                              text="–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è inline-–∫–Ω–æ–ø–∫–∏ "–î–µ–π—Å—Ç–≤–∏—è —Å –ø—Ä–æ–¥—É–∫—Ç–∞–º–∏"
@bot.callback_query_handler(func=lambda call: call.data == 'product_actions')
def handle_product_actions(call):
    from_user_id = call.from_user.id
    if is_admin(from_user_id):
        product_markup = types.InlineKeyboardMarkup()
        product_markup.row(types.InlineKeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç", callback_data="add_product"), types.InlineKeyboardButton(text="–£–¥–∞–ª–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç", callback_data="remove_product"),types.InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å —Ü–µ–Ω—É", callback_data="change_price"))
        product_markup.add(types.InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data=f"back_to_admin_panel:{call.message.message_id}"))
        # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥—Ä—É–≥–∏–µ –¥–µ–π—Å—Ç–≤–∏—è –ø–æ –∞–Ω–∞–ª–æ–≥–∏–∏

        bot.edit_message_text(chat_id=from_user_id, message_id=call.message.message_id, text="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ —Å –ø—Ä–æ–¥—É–∫—Ç–∞–º–∏:", reply_markup=product_markup)
    else:
        bot.edit_message_text(chat_id=from_user_id, message_id=call.message.message_id, text="–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.")



# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è inline-–∫–Ω–æ–ø–∫–∏ "–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–∫–∞–∑—ã"
@bot.callback_query_handler(func=lambda call: call.data == 'view_orders' or call.data == 'back_to_view')
def handle_view_orders(call):
    from_user_id = call.from_user.id
    chat_id = admin_group_chat_id
    if is_admin(from_user_id):
        # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∑–∞–∫–∞–∑–æ–≤
        categories_markup = types.InlineKeyboardMarkup()
        categories_markup.row(types.InlineKeyboardButton("–ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–∫–∞–∑—ã", callback_data="view_orders:active"),
                              types.InlineKeyboardButton("–£—Å–ø–µ—à–Ω—ã–µ –∑–∞–∫–∞–∑—ã", callback_data="view_orders:successful"),
                              types.InlineKeyboardButton("–û—Ç–º–µ–Ω–µ–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã", callback_data="view_orders:cancelled"))
        categories_markup.row(types.InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data=f"back_to_orders_group:{call.message.message_id}"))
        bot.edit_message_text(chat_id=from_user_id, message_id=call.message.message_id, text="–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∑–∞–∫–∞–∑–æ–≤:", reply_markup=categories_markup)
    else:
        bot.send_message(chat_id, "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.")

@bot.callback_query_handler(func=lambda call: call.data.startswith(("back_to_admin_panel:", "back_to_orders_group:", "back_to_view_orders:", "back_to_orders_actions:")))
def back_to_admin_panel(call):
    message_id = call.data.split(":")[1]
    if call.data.startswith("back_to_admin_panel:"):
        handle_admin(call, message_id)
    elif call.data.startswith("back_to_orders_group:"):
        handle_orders_group(call)
    elif call.data.startswith("back_to_view_orders:"):
        handle_view_orders(call)
    elif call.data.startswith("back_to_orders_actions:"):
        print(call.message.message_id)
        bad_try = call.data.split(":")[1]
        print(bad_try)
        handle_orders_actions(call, bad_try)

@bot.callback_query_handler(func=lambda call: call.data.startswith('view_orders:'))
def handle_view_orders_category(call):
    from_user_id = call.from_user.id
    chat_id = admin_group_chat_id
    if is_admin(from_user_id):
        category = call.data.split(":")[1]
        print(category)
        orders_info = get_orders_info(category)
        if orders_info:
            total_orders = len(orders_info)
            orders_per_page = 5
            total_pages = (total_orders + orders_per_page - 1) // orders_per_page
            current_page = 1

            send_orders_page(from_user_id, call.message.message_id, category, orders_info, current_page, total_pages)
        else:
            bot.send_message(from_user_id, "–ó–∞–∫–∞–∑–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç.")
    else:
        bot.send_message(from_user_id, "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.")


def get_orders_info(category):
    if category == "active":
        return dbf.select("orders", "*", "WHERE status IN (?, ?, ?)", ('–û–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è', '–≥–æ—Ç–æ–≤–∏—Ç—Å—è', '–≥–æ—Ç–æ–≤'))
    elif category == "successful":
        return dbf.select("orders", "*", "WHERE status = ?", ('–¥–æ—Å—Ç–∞–≤–ª–µ–Ω',))
    elif category == "cancelled":
        return dbf.select("orders", "*", "WHERE status = ?", ('–æ—Ç–º–µ–Ω–µ–Ω',))
    else:
        return None


def send_orders_page(chat_id, message_id, category, orders_info, current_page, total_pages):
    start_index = (current_page - 1) * 5
    end_index = min(start_index + 5, len(orders_info))
    orders_info_page = orders_info[start_index:end_index]
    print(start_index, end_index)
    order_text = f"{category}\n"
    order_text += f"–°—Ç—Ä–∞–Ω–∏—Ü–∞: {current_page}/{total_pages}\n\n"

    for order_info in orders_info_page:
        order_id, _, address, total_price, order_date, _, status, basket, _ = order_info
        order_text += f"–ó–∞–∫–∞–∑ ‚Ññ{order_id} –æ—Ç {order_date}\n"
        order_text += f"–ê–¥—Ä–µ—Å: {address}\n"
        order_text += f"–°—É–º–º–∞ –∑–∞–∫–∞–∑–∞: {total_price}\n"
        order_text += f"–°—Ç–∞—Ç—É—Å: {status}\n"
        order_text += "–°–æ—Å—Ç–∞–≤ –∑–∞–∫–∞–∑–∞:\n"

        basket_items = eval(basket)
        for item in basket_items:
            product_id, quantity = item['product_id'], item['quantity']
            product_info = dbf.s_product_info(product_id)
            if product_info:
                product_name = product_info[1]
                order_text += f"- {product_name} (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: {quantity})\n"

        order_text += "\n"

    navigation_markup = types.InlineKeyboardMarkup()
    navigation_markup.row(types.InlineKeyboardButton("–ü—Ä–µ–¥—ã–¥—É—â–∞—è", callback_data=f"view_orders_back:{category}:{current_page}:{total_pages}"),
                          types.InlineKeyboardButton(f"–°—Ç—Ä–∞–Ω–∏—Ü–∞: {current_page}/{total_pages}", callback_data="ignore"),
                          types.InlineKeyboardButton("–°–ª–µ–¥—É—é—â–∞—è", callback_data=f"view_orders_next:{category}:{current_page}:{total_pages}"))
    navigation_markup.add(types.InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data=f"back_to_view_orders:"))
    bot.edit_message_text(chat_id=chat_id, message_id=message_id, text=order_text, reply_markup=navigation_markup)


@bot.callback_query_handler(func=lambda call: call.data.startswith(("view_orders_next:", "view_orders_back:")))
def handle_pagination(call):
    from_user_id = call.from_user.id
    chat_id = admin_group_chat_id
    if is_admin(from_user_id):
        category = call.data.split(":")[1]
        current_page = int(call.data.split(":")[2])
        total_pages = int(call.data.split(":")[3])
        if call.data.startswith('view_orders_back:') and current_page > 1:
            current_page -= 1
        elif call.data.startswith('view_orders_next:') and current_page < total_pages:
            current_page += 1
        elif call.data.startswith('view_orders_next:') and current_page == total_pages:
            bot.answer_callback_query(callback_query_id=call.id, text="–í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ.")
            return
        elif call.data.startswith('view_orders_back:') and current_page == 1:
            bot.answer_callback_query(callback_query_id=call.id, text="–í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –Ω–∞ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ.")
            return
        print(current_page)
        orders_info = get_orders_info(category)
        if orders_info:
            send_orders_page(from_user_id, call.message.message_id, category, orders_info, current_page, total_pages)
        else:
            bot.send_message(from_user_id, "–ó–∞–∫–∞–∑–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç.")
    else:
        bot.send_message(from_user_id, "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.")

# –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
def is_admin(user_id):
    with conn:
        cursor.execute("SELECT * FROM admin_users WHERE user_id=?", (user_id,))
        admin_data = cursor.fetchone()
        return bool(admin_data)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω–æ–º –∑–∞–∫–∞–∑–µ –≤ –≥—Ä—É–ø–ø—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
def notify_admins_about_order(order_id, address, status, chat_id, message_id=None):
    if status == 0 or status == "–û–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è":
        status = 0
        message_text = f"–û–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è\n–ù–æ–≤—ã–π –∑–∞–∫–∞–∑ ‚Ññ{order_id}.\n–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏: {address}."
    elif status == 2 or status == "–æ—Ç–º–µ–Ω–µ–Ω":
        status = 2
        message_text = f"–û—Ç–º–µ–Ω–µ–Ω\n–ó–∞–∫–∞–∑ ‚Ññ{order_id}.\n–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏: {address}."
    elif status == 3 or status == "–≥–æ—Ç–æ–≤":
        status = 3
        message_text = f"–ì–æ—Ç–æ–≤! –í –ø—Ä–æ—Ü–µ—Å—Å–µ –¥–æ—Å—Ç–∞–≤–∫–∏.\n–ó–∞–∫–∞–∑ ‚Ññ{order_id}.\n–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏: {address}."
    elif status == 4 or status == "–¥–æ—Å—Ç–∞–≤–ª–µ–Ω":
        status = 4
        message_text = f"–î–æ—Å—Ç–∞–≤–ª–µ–Ω.\n–ó–∞–∫–∞–∑ ‚Ññ{order_id}.\n–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏: {address}."
    else:
        status = 1
        message_text = f"–ó–∞–∫–∞–∑ –≥–æ—Ç–æ–≤–∏—Ç—Å—è\n–ó–∞–∫–∞–∑ ‚Ññ{order_id}.\n–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏: {address}."

    order_button = InlineKeyboardButton("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–∫–∞–∑–µ", callback_data=f"confirm_order_info:{order_id}:{status}:{chat_id}")
    actions_button = InlineKeyboardButton("–î–µ–π—Å—Ç–≤–∏—è —Å –∑–∞–∫–∞–∑–æ–º", callback_data=f"order_actions:{order_id}:{status}:{chat_id}")
    keyboard = InlineKeyboardMarkup().add(order_button, actions_button)
    keyboard.add(InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data=f"back_to_orders_group:"))
    if not chat_id:
        chat_id = admin_group_chat_id

    if message_id:
        print(message_id)
        try:
            bot.edit_message_text(chat_id=chat_id, message_id=message_id, text=message_text, reply_markup=keyboard)
        except:
            bot.edit_message_text(chat_id=chat_id, message_id=(message_id-1), text=message_text, reply_markup=keyboard)
    else:
        bot.send_message(chat_id, message_text, reply_markup=keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è inline-–∫–Ω–æ–ø–∫–∏ "–î–µ–π—Å—Ç–≤–∏—è —Å –∑–∞–∫–∞–∑–∞–º–∏"
@bot.callback_query_handler(func=lambda call: call.data == 'orders_actions')
def handle_orders_actions(call, bad_try=None):
    from_user_id = call.from_user.id
    message_id = call.message.message_id
    if is_admin(from_user_id):
        keyboard = types.InlineKeyboardMarkup().add(InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back_to_orders_group:"))
        bot.edit_message_text(chat_id=from_user_id, message_id=message_id, text="–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏–π —Å –Ω–∏–º:", reply_markup=keyboard)
        bot.register_next_step_handler(call.message, admin_orders_actions, bad_try)
    else:
        bot.send_message(from_user_id, "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–≤–æ–¥–∞ –Ω–æ–º–µ—Ä–∞ –∑–∞–∫–∞–∑–∞
def admin_orders_actions(message, bad_try=None):
    global total
    from_user_id = message.from_user.id
    order_id = message.text
    message_id = message.message_id
    total += 1
    try:
        order_info = dbf.select("orders", "address, status", "WHERE order_id=?", (order_id,))[0]
        bot.delete_message(from_user_id, message_id)
        print(message_id)
        message_id -= total
    except:
        if message.text:
            bot.delete_message(from_user_id, message_id)
            message_id -= 1
        if bad_try:
            message_id = bad_try
        keyboard = types.InlineKeyboardMarkup().add(
            InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data=f"back_to_orders_actions:{message_id}"))
        bot.edit_message_text(chat_id=from_user_id, message_id=message_id, text="–ó–∞–∫–∞–∑ —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º –Ω–æ–º–µ—Ä–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=keyboard)
        return
    address, status = order_info
    # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞
    notify_admins_about_order(order_id, address, status, chat_id=from_user_id, message_id=message_id)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–î–µ–π—Å—Ç–≤–∏—è —Å –∑–∞–∫–∞–∑–æ–º"
@bot.callback_query_handler(
    func=lambda call: call.data.startswith(('confirm_order:', 'confirm_done:', 'confirm_delivery:', 'confirm_order_info', 'back_to_order:', 'order_actions:', 'cancel_order:')))
def confirm_order(call):
    chat_id = call.data.split(':')[3]
    status = int(call.data.split(':')[2])
    order_id = int(call.data.split(':')[1])
    address = dbf.select("orders", "address", "WHERE order_id=?", (order_id,))
    if not chat_id:
        chat_id = admin_group_chat_id
    if call.data.startswith('confirm_order:'):
        if int(status) == 1:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ –∑–∞–∫–∞–∑ —É–∂–µ –±—ã–ª –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω
            bot.answer_callback_query(call.id, text="–ó–∞–∫–∞–∑ —É–∂–µ –±—ã–ª –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω.", show_alert=True)
        elif int(status) == 0:
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –Ω–∞ "–≥–æ—Ç–æ–≤–∏—Ç—Å—è"
            with conn:
                dbf.update("orders", ("status", "–≥–æ—Ç–æ–≤–∏—Ç—Å—è"), ("order_id", order_id))
                bot.answer_callback_query(call.id, text="–ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω.", show_alert=True)
                status = 1
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞
                notify_admins_about_order(order_id, address, status, message_id=call.message.message_id, chat_id=chat_id)
        elif int(status) == 2:
            bot.answer_callback_query(call.id, text="–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å. –ó–∞–∫–∞–∑ –±—ã–ª –æ—Ç–º–µ–Ω–µ–Ω.",
                                      show_alert=True)
        elif int(status) == 3:
            bot.answer_callback_query(call.id, text="–ó–∞–∫–∞–∑ —É–∂–µ –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω.",
                                      show_alert=True)
        elif int(status) == 4:
            bot.answer_callback_query(call.id, text="–ó–∞–∫–∞–∑ —É–∂–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω.",
                                      show_alert=True)
    elif call.data.startswith('cancel_order:'):
        if int(status) == 1:
            bot.answer_callback_query(call.id, text="–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ—Ç–º–µ–Ω–∏—Ç—å. –ó–∞–∫–∞–∑ —É–∂–µ –±—ã–ª –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω.", show_alert=True)
        elif int(status) == 0:
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –Ω–∞ "–æ—Ç–º–µ–Ω–µ–Ω"
            with conn:
                dbf.update("orders", ("status", "–æ—Ç–º–µ–Ω–µ–Ω"), ("order_id", order_id))
                bot.answer_callback_query(call.id, text="–ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω.", show_alert=True)
                status = 2
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞
            notify_admins_about_order(order_id, address, status, message_id=call.message.message_id, chat_id=chat_id)
        elif int(status) == 2:
            bot.answer_callback_query(call.id, text="–ó–∞–∫–∞–∑ —É–∂–µ –æ—Ç–º–µ–Ω–µ–Ω.", show_alert=True)
        elif int(status) == 3:
            bot.answer_callback_query(call.id, text="–ó–∞–∫–∞–∑ —É–∂–µ –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω.",
                                      show_alert=True)
        elif int(status) == 4:
            bot.answer_callback_query(call.id, text="–ó–∞–∫–∞–∑ —É–∂–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω.",
                                      show_alert=True)
    elif call.data.startswith('confirm_done:'):
        if int(status) == 2:
            bot.answer_callback_query(call.id, text="–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å. –ó–∞–∫–∞–∑ –±—ã–ª –æ—Ç–º–µ–Ω–µ–Ω.", show_alert=True)
        if int(status) == 0:
            bot.answer_callback_query(call.id, text="–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å. –ó–∞–∫–∞–∑ –Ω–µ –±—ã–ª –ø—Ä–∏–Ω—è—Ç –≤ —Ä–∞–±–æ—Ç—É.", show_alert=True)
        elif int(status) == 1:
            with conn:
                dbf.update("orders", ("status", "–≥–æ—Ç–æ–≤"), ("order_id", order_id))
                bot.answer_callback_query(call.id, text="–ó–∞–∫–∞–∑ –≥–æ—Ç–æ–≤!", show_alert=True)
                status = 3
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞
            notify_admins_about_order(order_id, address, status, message_id=call.message.message_id, chat_id=chat_id)
        elif int(status) == 4:
            bot.answer_callback_query(call.id, text="–ó–∞–∫–∞–∑ —É–∂–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω.",
                                      show_alert=True)
    elif call.data.startswith('confirm_delivery:'):
        if int(status) == 2:
            bot.answer_callback_query(call.id, text="–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –¥–æ—Å—Ç–∞–≤–∫—É. –ó–∞–∫–∞–∑ –±—ã–ª –æ—Ç–º–µ–Ω–µ–Ω.",
                                      show_alert=True)
        elif int(status) == 0:
            bot.answer_callback_query(call.id, text="–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –¥–æ—Å—Ç–∞–≤–∫—É. –ó–∞–∫–∞–∑ –Ω–µ –±—ã–ª –ø—Ä–∏–Ω—è—Ç –≤ —Ä–∞–±–æ—Ç—É.",
                                      show_alert=True)
        elif int(status) == 1:
            bot.answer_callback_query(call.id, text="–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –¥–æ—Å—Ç–∞–≤–∫—É. –ó–∞–∫–∞–∑ –µ—â–µ –Ω–µ –≥–æ—Ç–æ–≤.",
                                      show_alert=True)
        elif int(status) == 3:
            with conn:
                dbf.update("orders", ("status", "–¥–æ—Å—Ç–∞–≤–ª–µ–Ω"), ("order_id", order_id))
                bot.answer_callback_query(call.id, text="–ó–∞–∫–∞–∑ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω!", show_alert=True)
                status = 4
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞
            notify_admins_about_order(order_id, address, status, message_id=call.message.message_id, chat_id=chat_id)
    elif call.data.startswith('back_to_order:'):
        print(status)
        notify_admins_about_order(order_id, address, status, message_id=call.message.message_id, chat_id=chat_id)
    elif call.data.startswith(('confirm_order_info', 'order_actions:')):
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        order_info = dbf.select("orders", "*", "WHERE order_id = ?", (order_id,))
        print(order_info[0][6])
        if order_info[0][6] == '–≥–æ—Ç–æ–≤–∏—Ç—Å—è':
            status = 1
        elif order_info[0][6] == '–û–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è':
            status = 0
        elif order_info[0][6] == '–æ—Ç–º–µ–Ω–µ–Ω':
            status = 2

        actions_button = InlineKeyboardButton("–î–µ–π—Å—Ç–≤–∏—è —Å –∑–∞–∫–∞–∑–æ–º", callback_data=f"order_actions:{order_id}:{status}:{chat_id}")
        back_to_order = InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data=f"back_to_order:{order_id}:{status}:{chat_id}")
        confirm_button = InlineKeyboardButton("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–∫–∞–∑", callback_data=f"confirm_order:{order_id}:{status}:{chat_id}")
        cancel_button = InlineKeyboardButton("–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑", callback_data=f"cancel_order:{order_id}:{status}:{chat_id}")
        confirm_done_button = InlineKeyboardButton("–ó–∞–∫–∞–∑ –≥–æ—Ç–æ–≤", callback_data=f"confirm_done:{order_id}:{status}:{chat_id}")
        confirm_delivery_button = InlineKeyboardButton("–ó–∞–∫–∞–∑ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω", callback_data=f"confirm_delivery:{order_id}:{status}:{chat_id}")

        if call.data.startswith('confirm_order_info'):
            keyboard = InlineKeyboardMarkup().add(actions_button, back_to_order)
        else:
            keyboard = InlineKeyboardMarkup().add(confirm_button, cancel_button)
            keyboard.row(confirm_done_button, confirm_delivery_button)
            keyboard.row(back_to_order)

        if order_info:
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∑–∞–∫–∞–∑–µ
            order_text = f"ID –∑–∞–∫–∞–∑–∞: {order_info[0][0]}\n"
            order_text += f"–°—Ç–∞—Ç—É—Å: {order_info[0][6]}\n"
            order_text += f"–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏: {order_info[0][2]}\n"
            order_text += f"–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {order_info[0][3]} —Ä—É–±.\n"
            order_text += f"–î–∞—Ç–∞ –∑–∞–∫–∞–∑–∞: {order_info[0][4]}\n"
            order_text += f"–û—Ü–µ–Ω–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏: {order_info[0][5]} –º–∏–Ω.\n\n"

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∑–∞–∫–∞–∑–µ
            bot.edit_message_text(chat_id=chat_id, message_id=call.message.message_id, text=order_text, reply_markup=keyboard)
        else:
            # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–∫–∞–∑–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —ç—Ç–æ–º
            bot.send_message(chat_id, "–û—à–∏–±–∫–∞: –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–∫–∞–∑–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–µ–π—Å—Ç–≤–∏—è —Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–º
@bot.callback_query_handler(func=lambda call: call.data.startswith(("access_comment:", "delete_comment:")))
def handle_access_comment(call):
    print(call.data)
    order_id = call.data.split(":")[2]
    message_id = call.data.split(":")[3]
    user_id = call.data.split(":")[1]
    where_from = call.data.split(":")[4]
    if where_from == "dish":
        dish_name = dbf.select("products", "name", "WHERE product_id=?", (order_id,))[0][0]
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –≤ —Ç–∞–±–ª–∏—Ü—É order_comments
    if call.data.startswith("access_comment"):
        if where_from == "order":
            dbf.update("order_comments", ("user_id", user_id), ("order_id", order_id))
            dbf.update("orders", ("rated", 1), ("order_id", order_id))
            access_text = f"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞–∫–∞–∑—É ‚Ññ{order_id} –æ–¥–æ–±—Ä–µ–Ω."
        else:
            access_text = f"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –±–ª—é–¥—É {dish_name} –æ–¥–æ–±—Ä–µ–Ω."
        bot.edit_message_text(chat_id=admin_group_chat_id, text=access_text, message_id=call.message.message_id)
    else:
        if where_from == "order":
            delete_text = f"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞–∫–∞–∑—É ‚Ññ{order_id} —É–¥–∞–ª–µ–Ω."
            dbf.delete("order_comments", ("order_id", order_id))
        else:
            delete_text = f"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –±–ª—é–¥—É {dish_name} —É–¥–∞–ª–µ–Ω."
            dbf.delete("dish_comments", ("product_id", order_id))
        bot.edit_message_text(chat_id=admin_group_chat_id, text=delete_text, message_id=call.message.message_id)
        bot.edit_message_text(chat_id=call.from_user.id, message_id=message_id, text="–í–∞—à –æ—Ç–∑—ã–≤ –±—ã–ª —É–¥–∞–ª–µ–Ω –ø–æ –æ–¥–Ω–æ–π –∏–∑ —Å–ª–µ–¥—É—é—â–∏—Ö –ø—Ä–∏—á–∏–Ω:\n–û—Ç–∑—ã–≤ –Ω–µ–∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–µ–Ω\n–û—Ç–∑—ã–≤ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–Ω–æ—Ä–º–∞—Ç–∏–≤–Ω—É—é –ª–µ–∫—Å–∏–∫—É")
@bot.message_handler(func=lambda message: message.text == "–ú–æ–∏ –∑–∞–∫–∞–∑—ã")
def handle_order_history(message):
    show_order_history(message.from_user.id)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã "–û—Ü–µ–Ω–∏—Ç—å –±–ª—é–¥–æ"
@bot.message_handler(func=lambda message: message.text == "–û—Ü–µ–Ω–∏—Ç—å –±–ª—é–¥–æ")
def handle_rate_dish(message):
    user_id = message.from_user.id

    dishes = dbf.select("products", "*", "", ())
    print(dishes)
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –±–ª—é–¥–∞–º–∏ –¥–ª—è –æ—Ü–µ–Ω–∫–∏
    keyboard = types.InlineKeyboardMarkup()
    for dish in dishes:
        dish_id, dish_name, _, _, _, _, _, _ = dish
        keyboard.add(types.InlineKeyboardButton(f"{dish_name}", callback_data=f"rate_dish:{dish_id}"))

    bot.send_message(user_id, "–í—ã–±–µ—Ä–∏—Ç–µ –±–ª—é–¥–æ –¥–ª—è –æ—Ü–µ–Ω–∫–∏:", reply_markup=keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Ü–µ–Ω–∫–∏ –±–ª—é–¥–∞
@bot.callback_query_handler(func=lambda call: call.data.startswith('rate_dish:'))
def handle_marks_of_dish(call):
    from_user_id = call.from_user.id
    product_id = call.data.split(":")[1]
    message_id = call.message.message_id

    dish_info = dbf.s_product_info(product_id)
    if dish_info:
        dish_id, dish_name, description, dish_price, rating, total_ratings, _, _ = dish_info
    message_text = f"{dish_name}\n{description}\n–¶–µ–Ω–∞: {dish_price} —Ä—É–±.\n\n"
    image_path = f"images/{dish_id}.jpg"
    keyboard = types.InlineKeyboardMarkup()
    keyboard.row(InlineKeyboardButton("1", callback_data=f"mark_of_dish:{dish_id}:{1}"),
                 InlineKeyboardButton("2", callback_data=f"mark_of_dish:{dish_id}:{2}"),
                 InlineKeyboardButton("3", callback_data=f"mark_of_dish:{dish_id}:{3}"),
                 InlineKeyboardButton("4", callback_data=f"mark_of_dish:{dish_id}:{4}"),
                 InlineKeyboardButton("5", callback_data=f"mark_of_dish:{dish_id}:{5}"))
    keyboard.add(InlineKeyboardButton("–û—Å—Ç–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π", callback_data=f"comment_dish:{dish_id}"))
    keyboard.add(InlineKeyboardButton("–ù–∞–∑–∞–¥ –∫ –±–ª—é–¥–∞–º", callback_data=f"back_to_dishes:"))

    try:
        if message_id:
            bot.edit_message_media(chat_id=from_user_id, message_id=message_id,
                                   media=InputMediaPhoto(open(image_path, 'rb'), caption=message_text),
                                   reply_markup=keyboard)
    except:
        bot.send_photo(from_user_id, open(image_path, 'rb'), caption=message_text, reply_markup=keyboard)


@bot.callback_query_handler(func=lambda call: call.data.startswith("mark_of_dish:"))
def mark_of_dish(call):
    from_user_id = call.from_user.id
    user_id = dbf.s_user_id(from_user_id)[0]
    dish_id = call.data.split(":")[1]
    new_rating = int(call.data.split(":")[2])

    dish_info = dbf.s_product_info(dish_id)
    if dish_info:
        dish_id, dish_name, _, _, rating, total_ratings, _, _ = dish_info

        user_rating = dbf.select("dish_comments", "rating", "WHERE user_id = ? AND product_id = ?", (user_id, dish_id))
        if user_rating and user_rating[0][0] != None:
            bot.answer_callback_query(callback_query_id=call.id, text=f"–í—ã —É–∂–µ –æ—Ü–µ–Ω–∏–ª–∏ {dish_name} –Ω–∞ {int(user_rating[0][0])} –∑–≤–µ–∑–¥(—ã).")
        else:
            # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—É—é –æ—Ü–µ–Ω–∫—É –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            new_rating = int(call.data.split(":")[2])
            total_ratings += 1
            rating = ((rating * (total_ratings - 1)) + new_rating) / total_ratings

            test_dish = dbf.select("dish_comments", "comment_id", "WHERE product_id=?", (dish_id,))
            if test_dish and test_dish[0][0] != None:
                dbf.update("dish_comments", ("rating", new_rating), ("product_id", dish_id))
            else:
                dbf.insert("dish_comments", "user_id, product_id, rating", (user_id, dish_id, new_rating))
            dbf.update("products", ("rating", rating), ("product_id", dish_id))
            dbf.update("products", ("total_ratings", total_ratings), ("product_id", dish_id))

            bot.answer_callback_query(callback_query_id=call.id, text=f"–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à—É –æ—Ü–µ–Ω–∫—É {dish_name}! –°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞ —Ç–µ–ø–µ—Ä—å {rating:.2f} –∑–≤–µ–∑–¥(—ã).")


@bot.callback_query_handler(func=lambda call: call.data.startswith("comment_dish:"))
def comment_dish(call):
    from_user_id = call.from_user.id
    user_id = dbf.s_user_id(from_user_id)[0]
    dish_id = call.data.split(":")[1]

    dish_info = dbf.s_product_info(dish_id)
    if dish_info:
        dish_id, dish_name, _, _, rating, total_ratings, _, _ = dish_info

    user_comment = dbf.select("dish_comments", "comment_text", "WHERE user_id = ? AND product_id = ?", (user_id, dish_id))
    print(user_comment)
    if user_comment and user_comment[0][0] != None:
        bot.answer_callback_query(callback_query_id=call.id, text=f"–í—ã —É–∂–µ –æ—Å—Ç–∞–≤–∏–ª–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –±–ª—é–¥—É {dish_name}")
    else:
        bot.send_message(from_user_id, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:")
        bot.register_next_step_handler(call.message, process_comment_dish, dish_id)

def process_comment_dish(message, dish_id):
    # –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—Å—Ç –æ—Ç–∑—ã–≤–∞
    comment_text = message.text
    from_user_id = message.from_user.id
    user_id = dbf.s_user_id(from_user_id)[0]
    message_id = int(message.message_id) + 1
    print(message_id)

    if from_user_id:
        # –û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –µ–≥–æ –æ—Ç–∑—ã–≤ —Å –∫–Ω–æ–ø–∫–∞–º–∏ "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ç–∑—ã–≤" –∏ "–ò–∑–º–µ–Ω–∏—Ç—å –æ—Ç–∑—ã–≤"
        keyboard = types.InlineKeyboardMarkup()
        save_button = types.InlineKeyboardButton("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ç–∑—ã–≤",
                                                 callback_data=f"save_comment:{dish_id}:{message_id}:dish")
        edit_button = types.InlineKeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å –æ—Ç–∑—ã–≤",
                                                 callback_data=f"edit_comment:{dish_id}:{message_id}:dish")
        keyboard.add(save_button, edit_button)
        test_dish = dbf.select("dish_comments", "comment_id", "WHERE product_id=?", (dish_id,))
        if test_dish and test_dish[0][0] != None:
            dbf.update("dish_comments", ("comment_text", comment_text), ("product_id", dish_id))
        else:
            dbf.insert("dish_comments", "user_id, product_id, comment_text", (user_id, dish_id, comment_text))


        bot.send_message(from_user_id, f"–í–∞—à –æ—Ç–∑—ã–≤:\n{comment_text}", reply_markup=keyboard)
    else:
        bot.send_message(from_user_id, "–í–∞—à –∞–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


#–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ —Å–ø–∏—Å–∫—É –±–ª—é–¥ –Ω–∞ —ç—Ç–∞–ø–µ –æ—Ü–µ–Ω–∫–∏(—É–¥–∞–ª–∏–ª–ø—Ä–æ—Å—Ç)
@bot.callback_query_handler(func=lambda call: call.data.startswith("back_to_dishes:"))
def back_to_dishes(call):
    handle_rate_dish(call)


# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
print("Ready")
bot.infinity_polling()